{% extends 'dashboard.html.twig' %}

{% block title %}Мониторинг звонков{% endblock %}

{% block body %}
    <style>
        .queue-element {
            display: block;
            margin-top: 95px;
            padding-left: 9px;
        }
        .queue-element:before, .queue-element:after,
        .queue-element-phones:before, .queue-element-phones:after
        {
            content: '';
            display: table;
            clear: both;
        }
        .queue-element-name {
            width: 100%;
        }
        .queue-element-phones {}

        .phone-element {
            float: left;
            background-color: #444444;
            color: #eee;
            width: 194px;
            height: 194px;
            margin-bottom: 10px;
            text-align: center;
            border-radius: 20px;
            font-size: 22px;
        }
        .phone-element > span {
            padding: 81px 47px;
            display: inline-block;
        }
        .phone-element:first-child,.phone-element + .phone-element {
            margin-right: 10px;
        }
        .available {
            background-color: #44bb44;
            color: #333;
        }
        .busy {
            background-color: #ff4444;
            color: #333;
        }
        .paused {
            background-color: #ffdd00;
            color: #333;
        }

    </style>
    <div class="container">
        <div class="row" id="monitorData"></div>
    </div>
{% endblock %}
{% block javascripts %}
    <script>
        (function (d, w) {
            var monitorDataTag = d.getElementById('monitorData');
            var dataMonitor = '{{ data|raw }}';
            var objectMonitor = {};

            drawPhones();
            setTimeout(refreshData, 3000);

            function refreshData() {
                sendData('/dashboard/monitoring', {}, function (data) {
                    var arrayData = JSON.parse(data);
                    if (arrayData.hasOwnProperty('data')) {
                        var newDataMonitor = arrayData.data;
                        if(newDataMonitor != dataMonitor) {
                            dataMonitor = newDataMonitor;
                            drawPhones();
                        }
                    }
                    setTimeout(refreshData, 3000);
                });
            }

            function drawPhones() {
                if (dataMonitor) {
                    clearNode(monitorDataTag);
                    objectMonitor = JSON.parse(dataMonitor);
                    if (objectMonitor.hasOwnProperty('queue')) {
                        var root = objectMonitor.queue;
                        for (var queueName in root) {
                            if (queueName === '0658') {
                                var queueNode = createQueueElement(queueName, root[queueName]);
                                monitorDataTag.appendChild(queueNode);
                            }
                        }
                    }
                }
            }

            function createQueueElement(name, data) {
                var phones = d.createDocumentFragment();
                var members = data['members'];

                for (phoneNumber in members) {
                    phones.appendChild(createPhoneElement(phoneNumber, members[phoneNumber]));
                }
                return el ('div', {class: 'queue-element'}, [
                    //el ('div', {class: 'queue-element-name'}, name),
                    el ('div', {class: 'queue-element-phones'}, [
                        phones
                    ])
                ]);
            }

            function createPhoneElement(phone, statuses) {
                var classes = ['phone-element'];
                classes.push(getClassByStatus(statuses));
                var options = {class: classes.join(' ')};
                return el('div', options, [
                    el ('span', {}, phone)
                ]);
            }

            function getClassByStatus(statuses) {
                if (statuses.indexOf('paused') > -1) {
                    //return 'paused';
                    return 'available';
                }
                if (statuses.indexOf('Unavailable') > -1) {
                    return 'unavailable';
                }
                if (statuses.indexOf('Not in use') > -1) {
                    return 'available';
                }
                if (statuses.indexOf('In use') > -1) {
                    return 'busy';
                }
                return '';
            }
        }) (document, window);
    </script>
{% endblock %}